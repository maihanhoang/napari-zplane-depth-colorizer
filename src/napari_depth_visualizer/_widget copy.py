"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget, QSlider
from skimage.util import img_as_float
from skimage.color import rgb2gray
import numpy as np
from napari.utils.notifications import show_info

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
# def threshold_autogenerate_widget(
#     img: "napari.types.ImageData",
#     threshold: "float", 
# ) -> "napari.types.LabelsData":
#     return img_as_float(img) > threshold

# def rgb_composite_widget(
#     red: "napari.types.ImageData",
#     green: "napari.types.ImageData",
#     blue: "napari.types.ImageData",
# ) -> "napari.types.LabelsData":
#     return img_as_float(np.dstack((red,green,blue)))


# def rgb_composite_widget(
#     red: "napari.layers.Image",
#     green: "napari.layers.Image",
#     blue: "napari.layers.Image",
# ) -> "napari.types.ImageData":

#     # Take care of dimensions

#     # if RGB convert to grayscale image
#     # if is_rgb(red) is True:
#     #     red = rgb2gray(red)
#     # if is_rgb(green) is True:
#     #     green = rgb2gray(green)
#     # if is_rgb(blue) is True:
#     #     blue = rgb2gray(blue)

#     red = rgb2gray(red)
#     green = rgb2gray(green)
#     blue = rgb2gray(blue)

#     rgb_composite = np.stack((red, green, blue), axis=3)
#     viewer.add_image(rgb_composite)

#     # return img_as_float(rgb_composite)
#     return img_as_float(rgb_composite)


# def threshold_autogenerate_widget(
#     Colormap: "napari.types.ImageData",
# ) -> "napari.types.LabelsData":
#     return img_as_float(Colormap)


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
# @magic_factory(
#     threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
# )
# def threshold_magic_widget(
#     img_layer: "napari.layers.Image", threshold: "float"
# ) -> "napari.types.LabelsData":
#     return img_as_float(img_layer.data) > threshold


@magic_factory(
    call_button="Create Composite"
)
def threshold_magic_widget(
    # TODO set default
    Red: "napari.layers.Image",
    Green: "napari.layers.Image",
    Blue: "napari.layers.Image",
) -> "napari.types.ImageData":
    
    #TODO: check first if input image is grayscale or not
    red = rgb2gray(Red.data)
    green = rgb2gray(Green.data)
    blue = rgb2gray(Blue.data)

    rgb_composite = np.stack((red, green, blue), axis=3)
    return img_as_float(rgb_composite)


# @magic_factory(
#     call_button="Process",
#     # dropdown={"choices": ['Average', 'Min', 'Max', 'Sum', 'Standard Deviation', 'Median']},
#     Projection_Type={"choices": ['Average Intensity', 'Min Intensity', 'Max Intensity', 'Sum Slices', 'Standard Deviation', 'Median']}
# )
# def z_projection_widget(
#     Input: "napari.layers.Image",
#     Slices="Ex. 1, 2, 4:10",
#     Name="Output Name",
#     Projection_Type='Average Intensity',
#     # date=datetime.datetime.now(),
#     # filename=pathlib.Path('/some/path.ext')
# ) -> "napari.types.ImageData":

#     # TODO: check that input is valid
#     # assert _is_input_image_valid(Input)
#     image = Input.data
#     assert len(image.shape) == 4

#     #TODO: check if input for slices is valid

#     if Projection_Type == 'Average Intensity':
#         output = _average_intensity(image, Slices)
#     # elif Projection_Type == 'Min Intensity':
#     #     output = _min_intensity(Input, Slices)
#     # elif Projection_Type == 'Max Intensity':
#     #     output = _max_intensity(Input, Slices)
#     # elif Projection_Type == 'Sum Slices':
#     #     output = _sum_slices(Input, Slices)
#     # elif Projection_Type == 'Standard Deviation':
#     #     output = _standard_deviation(Input, Slices)
#     # elif Projection_Type == 'Median':
#     #     output = _median(Input, Slices)
#     else:
#         print("Projection Type not valid.")
#         show_info("Projection Type not valid.")

#     return img_as_float(output)
  

# def _average_intensity(input_image, slices_input):
#     slice_numbers = slices_input.split(sep=',')
#     slice_numbers = list(map(int, slice_numbers))
#     slices = np.array([input_image[:, idx] for idx in slice_numbers])
#     composite = np.mean(slices, axis=0)
#     return composite


# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_input_layer = create_widget(
            label="Input Image", annotation="napari.layers.Image"
        )
        self._slice_numbers = create_widget(
            label="Slices", annotation=str, value="1, 2, 3"
        )
        self._image_output_name = create_widget(
            label="Output Name", annotation=str, value="z-projection result"
        )
        self._projection_type = create_widget(
            label="Projection Type", 
            options={"choices": ['Average Intensity', 'Min Intensity', 'Max Intensity', 'Sum Slices', 'Standard Deviation', 'Median']}
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        self._start_processing = create_widget(
            label="Process", widget_type="PushButton"
        )

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)
        self._start_processing.clicked.connect(self._project_in_z_plane)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_input_layer,
                self._slice_numbers,
                self._image_output_name,
                self._projection_type,
                self._threshold_slider,
                self._invert_checkbox,
                self._start_processing 
            ]
        )

    
    def _project_in_z_plane(self):

        # TODO: check that input is valid

        image_layer = self._image_input_layer.value
        image = img_as_float(image_layer.data)
        
        if image_layer is None:
            return 
        if len(image.shape) != 4:
            show_info("Image must be 4D with dimensions TZYX")
            return
                
        if self._is_slice_input_valid() is False:
            show_info("Slice input is not valid.")
            return

        if self._projection_type.value == "Average Intensity":
            output = self._average_intensity()
        # elif Projection_Type == 'Min Intensity':
        #     output = _min_intensity(Input, Slices)
        # elif Projection_Type == 'Max Intensity':
        #     output = _max_intensity(Input, Slices)
        # elif Projection_Type == 'Sum Slices':
        #     output = _sum_slices(Input, Slices)
        # elif Projection_Type == 'Standard Deviastion':
        #     output = _standard_deviation(Input, Slices)
        # elif Projection_Type == 'Median':
        #     output = _median(Input, Slices)
    
        else:
            print("Projection Type not valid.")
            show_info("Projection Type not valid.")
            return

        if self._image_output_name.value == '':
            name = image_layer.name + "_zprojection"
        else:
            name = self._image_output_name.value
        self._viewer.add_image(output, name=name)
                
        return
    

    def _is_slice_input_valid(self):
        """
        1. if it contains any characters except for int numbers, ",", " " or ":" it is not a valid input
        2. if it exceeds number of planes
        3. ,, empty or completely empty
        4. input like ,:, or ::
        5. Overlapping planes
        """
        image_input = self._image_input_layer.value.data
        slice_numbers = self._slice_numbers.value

        # Image dimensions
        t, z, y, x = image_input.shape

        acceptable_chars = set("0123456789:, ")
        if set(slice_numbers).issubset(acceptable_chars) is False:
            return False
        
        # Check single substring
        slice_num = slice_numbers.replace(" ", "") # remove all whitespace
        slice_num_parts = slice_num.split(sep=',') # separate by commas
                      
        for substring in slice_num_parts:  
            if len(substring) not in [1, 3, 5]: #Check length of substrings
                return False

            # Check slice inputs, start:stop or start:stop:step
            if ":" in substring:                
                parts = substring.split(':')

                try:
                    # Convert parts to integers
                    start = int(parts[0])
                    stop = int(parts[1])
                    step = int(parts[2]) if len(parts) == 3 else 1
                    
                    # Validate values for slice
                    if start < 0 or stop < 0 or (len(parts) == 3 and step == 0):
                        return False
                    
                    if start >= stop:
                        return False
                    
                    # Check if exceeds image dimension in z-plane
                    if start >= z or stop > z:
                        return False

                except ValueError:
                    # If conversion to int fails
                    return False
            else:
                try:
                    # Convert index to integer
                    index = int(substring)
                    if index < 0 or index >= z:
                        return False
                except ValueError:
                    # If conversion to int fails
                    return False

        return True

        
    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


    def _average_intensity(self):
        """
        Given that input has dimensions TZYX, averages multiple z-planes
        Outputs image of dimension TYX
        """

        image_input = self._image_input_layer.value.data
        slice_numbers = self._slice_numbers.value
        # Get image dimensions
        t, z, y, x = image_input.shape
        
        slice_num = slice_numbers.replace(" ", "") # remove all whitespace
        slice_num_parts = slice_num.split(sep=',') # separate by commas

        indices = []
        for substring in slice_num_parts:
            if ":" in substring:
                parts = list(map(int, substring.split(':')))
                idx = slice(*parts)
            else:
                idx = int(substring)
            indices.append(idx)

        slices = [image_input[:, idx].reshape(t, -1, y, x) for idx in indices]
        slices_concat = np.concatenate(slices, axis=1)
        composite = np.mean(slices_concat, axis=1)
        
        return img_as_float(composite)



# # if we want even more control over our widget, we can use
# # magicgui `Container`
# class ImageThreshold(Container):
#     def __init__(self, viewer: "napari.viewer.Viewer"):
#         super().__init__()
#         self._viewer = viewer
#         # use create_widget to generate widgets from type annotations
#         self._image_layer_combo = create_widget(
#             label="Image", annotation="napari.layers.Image"
#         )
#         self._threshold_slider = create_widget(
#             label="Threshold", annotation=float, widget_type="FloatSlider"
#         )
#         self._threshold_slider.min = 0
#         self._threshold_slider.max = 1
#         # use magicgui widgets directly
#         self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

#         # connect your own callbacks
#         self._threshold_slider.changed.connect(self._threshold_im)
#         self._invert_checkbox.changed.connect(self._threshold_im)

#         # append into/extend the container with your widgets
#         self.extend(
#             [
#                 self._image_layer_combo,
#                 self._threshold_slider,
#                 self._invert_checkbox,
#             ]
#         )

#     def _threshold_im(self):
#         image_layer = self._image_layer_combo.value
#         if image_layer is None:
#             return

#         image = img_as_float(image_layer.data)
#         name = image_layer.name + "_thresholded"
#         threshold = self._threshold_slider.value
#         if self._invert_checkbox.value:
#             thresholded = image < threshold
#         else:
#             thresholded = image > threshold
#         if name in self._viewer.layers:
#             self._viewer.layers[name].data = thresholded
#         else:
#             self._viewer.add_labels(thresholded, name=name)


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")
